name: CI

on:
  push:
    branches: ['**']  # All branches
  pull_request:
    branches: ['**']  # All branches

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          # GitHub Actions environment
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            sudo apt-get update
            
            # Install ImageMagick with WebP and AVIF support
            sudo apt-get install -y imagemagick libmagickwand-dev
            
            # Install FFmpeg with AV1 encoder support for AVIF animation
            sudo apt-get install -y ffmpeg
            
            # Install AVIF development libraries
            sudo apt-get install -y libavif-dev libavif-bin
            
            # Install additional image format libraries
            sudo apt-get install -y libjpeg-dev libpng-dev libtiff-dev libwebp-dev
            
            # Configure ImageMagick to allow additional formats
            sudo sed -i 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/' /etc/ImageMagick-6/policy.xml || true
            sudo sed -i 's/rights="none" pattern="XPS"/rights="read|write" pattern="XPS"/' /etc/ImageMagick-6/policy.xml || true
            
            # Install ICC color profiles
            sudo apt-get install -y icc-profiles icc-profiles-free
            
            # Create directory for ICC profiles if it doesn't exist
            sudo mkdir -p /usr/share/color/icc/profiles
            
            # Download common ICC profiles if not available
            if [ ! -f "/usr/share/color/icc/sRGB.icc" ]; then
              sudo wget -q -O /usr/share/color/icc/sRGB.icc https://www.color.org/srgbprofiles.xalter || true
            fi
            
            # List available ICC profiles for debugging
            echo "Available ICC profiles:"
            find /usr/share/color -name "*.icc" 2>/dev/null || echo "No ICC profiles found"
            
            # Verify installations
            echo "=== Installation Verification ==="
            magick -version || convert -version
            echo "FFmpeg version:"
            ffmpeg -version | head -1
            echo "Available encoders with AV1:"
            ffmpeg -encoders 2>/dev/null | grep av1 || echo "No AV1 encoders found"
            echo "ImageMagick format support:"
            magick -list format | grep -E "(WEBP|AVIF)" || echo "WebP/AVIF not found in ImageMagick"
            
          else
            # Local wrkflw environment - skip system dependencies
            echo "Running in local environment, skipping system dependency installation"
          fi

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          # Check if we're in local wrkflw environment
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            # Install additional test dependencies
            pip install pytest-xvfb  # For headless GUI testing if needed
          else
            # Local environment - basic installation only
            echo "Local environment detected - installing minimal dependencies"
            which pip && pip install pytest || echo "pip not available, continuing"
          fi

      - name: Verify environment setup
        run: |
          echo "=== Environment Check ==="
          echo "Python version: $(python --version 2>&1 || echo 'Python not available')"
          echo "Pip version: $(pip --version 2>&1 || echo 'Pip not available')"
          echo "Working directory: $(pwd)"
          echo "Environment variables:"
          echo "  GITHUB_ACTIONS: ${GITHUB_ACTIONS:-not set}"
          echo "  HOME: ${HOME:-not set}"
          echo "Directory contents:"
          ls -la || echo "ls command failed"

          # Optional dependency checks (non-failing)
          python -c "import PIL; print(f'Pillow version: {PIL.__version__}')" 2>/dev/null || echo "Pillow not available"
          python -c "import cv2; print(f'OpenCV version: {cv2.__version__}')" 2>/dev/null || echo "OpenCV not available"
          python -c "import numpy; print(f'NumPy version: {numpy.__version__}')" 2>/dev/null || echo "NumPy not available"
          python -c "import piexif; print('piexif imported successfully')" 2>/dev/null || echo "piexif not available"
          python -c "import noise; print('noise imported successfully')" 2>/dev/null || echo "noise not available"
          python -c "import pillow_heif; print('pillow-heif imported successfully')" 2>/dev/null || echo "pillow-heif not available (optional for AVIF)"

          # Test WebP support in Pillow
          python -c "from PIL import Image; Image.new('RGB', (10,10)).save('/tmp/test.webp', 'WEBP'); print('WebP support confirmed')" 2>/dev/null || echo "WebP support not available in Pillow"

          # Test ImageMagick and FFmpeg availability (optional in local environment)
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            echo "=== System Tool Verification ==="
            python -c "import subprocess; subprocess.run(['magick', '-version'], check=True)" || \
            python -c "import subprocess; subprocess.run(['convert', '-version'], check=True)"
            
            python -c "import subprocess; subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True); print('FFmpeg available')" || echo "FFmpeg not available"
            
            # Test AVIF creation capability
            python -c "import subprocess; result = subprocess.run(['magick', '-list', 'format'], capture_output=True, text=True); print('ImageMagick AVIF support confirmed' if 'AVIF' in result.stdout else 'ImageMagick AVIF support not available'); result2 = subprocess.run(['ffmpeg', '-encoders'], capture_output=True, text=True); print('FFmpeg AV1 encoder support confirmed' if 'libaom-av1' in result2.stdout else 'FFmpeg AV1 encoder not available')" || echo "AVIF capability test failed"
          else
            echo "Skipping system tool tests in local environment"
          fi

      - name: Run basic Python tests
        run: |
          echo "=== Basic Python Tests ==="
          python -c "print('Python environment is working')" || exit 1

          # Test if main module can be imported
          python -c "import sys; sys.path.insert(0, 'src'); print('Source directory accessible')" || echo "Source import test failed (non-critical)"

          # Check if main CLI exists
          if [ -f "toolkit.py" ]; then
            echo "Main CLI script found"
            python -c "import ast; ast.parse(open('toolkit.py').read()); print('CLI script syntax OK')" || echo "CLI syntax check failed (non-critical)"
          else
            echo "Main CLI script not found"
          fi

          echo "Basic Python tests completed successfully"

      - name: Run original image generation tests
        run: |
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            pytest tests/test_original_generation.py -v --tb=short
          else
            echo "Skipping image generation tests in local environment (requires ImageMagick)"
          fi

      - name: Run variation generation and validation tests
        run: |
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            pytest tests/test_variation_generation.py -v --tb=short
          else
            echo "Skipping variation tests in local environment (requires ImageMagick)"
          fi

      - name: Test CLI commands (integration test)
        run: |
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            # Test generate-original command
            python toolkit.py generate-original --output-dir test_output --test-compliance
            
            # Test generate-variations command  
            python toolkit.py generate-variations --source-dir test_output --output-dir test_output
            
            # Test validate-variations command
            python toolkit.py validate-variations --output-dir test_output --report-file test_output/validation_report.json
            
            # Verify output files exist
            echo "=== Output Verification ==="
            ls -la test_output/
            echo "JPEG variations:"
            ls -la test_output/jpeg/ | head -10
            echo "PNG variations:"
            ls -la test_output/png/ | head -10
            echo "GIF variations:"
            ls -la test_output/gif/ | head -10
            echo "WebP variations:"
            ls -la test_output/webp/ || echo "WebP directory not found"
            echo "AVIF variations:"
            ls -la test_output/avif/ || echo "AVIF directory not found"
            
            # Verify index.json was created
            test -f test_output/index.json
            echo "Index file lines:"
            wc -l test_output/index.json
            
            # Verify validation report was created
            test -f test_output/validation_report.json
            echo "Validation report created successfully"
            
            # Show format counts in index.json
            echo "=== Format Distribution ==="
            python -c "import json; data = json.load(open('test_output/index.json')); formats = {}; [formats.update({item.get('format', 'unknown'): formats.get(item.get('format', 'unknown'), 0) + 1}) for item in data]; [print(f'{fmt}: {count} variations') for fmt, count in sorted(formats.items())]; print(f'Total: {sum(formats.values())} items')" || echo "Format counting failed"
          else
            # Basic CLI test for local environment
            echo "=== Basic CLI Test ==="
            if [ -f "toolkit.py" ]; then
              echo "toolkit.py found, testing basic functionality"
              python toolkit.py --help 2>&1 || echo "CLI help test completed (may have failed but non-critical)"
            else
              echo "toolkit.py not found in current directory"
            fi
            echo "CLI test completed"
          fi

      - name: Final success confirmation
        run: |
          echo "=== Workflow Completion ==="
          if [ "$GITHUB_ACTIONS" = "true" ]; then
            echo "GitHub Actions environment: All tests completed"
          else
            echo "Local wrkflw environment: Basic validation completed successfully"
          fi
          echo "Workflow finished successfully"

      - name: Archive test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-images
          path: |
            test_output/index.json
            test_output/validation_report.json
            test_output/test_original.*
            test_output/webp/
            test_output/avif/
          retention-days: 7

      - name: Archive coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 7
